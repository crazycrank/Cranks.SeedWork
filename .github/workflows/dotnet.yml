name: .NET

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

env:
  BUILD_CONFIGURATION: Release

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    outputs:
      branchName: ${{ steps.gitversion.outputs.branchName }}
      semVer: ${{ steps.gitversion.outputs.semVer }}"

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        
    - name: Cache .NET
      uses: actions/cache@v3
      id: cache-dotnet
      with:
        path: ~/runner/.nuget/packages/gitversion.tool
        key: ${{ runner.os }}-dotnet-${{ hashFiles('global.json') }}
        
    - name: Setup .NET
      if: steps.cache-dotnet.outputs.cache-hit != 'true'
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
        include-prerelease: false
        
    #- name: Cache GitVersion
    #  uses: actions/cache@v3
    #  id: cache-gitversion 
    #  with:
    #    path: ~/runner/.gitversion
    #    key: ${{ runner.os }}-gitversion-${{ hashFiles('./config/dotnet-tools.json') }}

    - name: Install GitVersion
      #if: steps.cache-gitversion.outputs.cache-hit != 'true'
      run: dotnet tool restore

    - name: Determine Version
      id: gitversion
      run: dotnet gitversion /output buildserver

    - name: Cache dependencies
      id: cache-dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.nuget/packages
          SeedWork/src/Core/obj/project.assets.json
          SeedWork/tst/Core.Tests/obj/project.assets.json
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}

    - name: Restore dependencies
      #if: steps.cache-dependencies.outputs.cache-hit != 'true'
      run: dotnet restore SeedWork/SeedWork.sln

    - name: Build
      run: |
        dotnet build SeedWork/SeedWork.sln \
        --no-restore \
        --configuration ${{ env.BUILD_CONFIGURATION }} \
        -p:VersionPrefix=${{ env.GitVersion_MajorMinorPatch }} \
        -p:VersionSuffix=${{ env.GitVersion_PreReleaseTag }} \
        -p:InformationalVersion=${{ env.GitVersion_InformationalVersion }}

    - name: Test
      run: |
        dotnet test SeedWork/SeedWork.sln \
        --no-build \
        --configuration ${{ env.BUILD_CONFIGURATION }}

    - name: Pack
      if: contains(env.GitVersion_BranchName, 'master') || contains(env.GitVersion_BranchName, 'develop')
      run: |
        dotnet pack SeedWork/SeedWork.sln \
        --no-build \
        --configuration ${{ env.BUILD_CONFIGURATION }} \
        --include-symbols \
        --include-source \
        --output nupkgs \
        -p:VersionPrefix=${{ env.GitVersion_MajorMinorPatch }} \
        -p:VersionSuffix=${{ env.GitVersion_PreReleaseTag }}

    - name: Nuget Publish
      if: contains(env.GitVersion_BranchName, 'master') || contains(env.GitVersion_BranchName, 'develop')
      run: |
        dotnet nuget push \
        "nupkgs/Cranks.SeedWork.*.${{ env.GitVersion_SemVer }}.nupkg" \
        --api-key ${{ secrets.NuGetAPIKey }} \
        --source https://api.nuget.org/v3/index.json

    - name: Tag commit with version
      if: contains(env.GitVersion_BranchName, 'master') || contains(env.GitVersion_BranchName, 'develop')
      run: |
        git tag v${{ env.SemVer }}
        git push --tag

using Verify = Cranks.SeedWork.Domain.Generator.Tests.Verifiers.CSharpSourceGeneratorVerifier<
    Cranks.SeedWork.Domain.Generator.Generators.SmartEnumSourceGenerator>;

namespace Cranks.SeedWork.Domain.Generator.Tests.Generators;

public class SmartEnumGeneratorTests
{
    [Fact]
    public async Task SmartEnum_GeneratesCorrectCode()
    {
        var source = @"
using Cranks.SeedWork.Domain;
using Cranks.SeedWork.Domain;

namespace SomeNamespace;

[SmartEnum]
public sealed partial record TestSmartEnum(int Key, string Value) : SmartEnum<int>
{
    public static readonly TestSmartEnum Value1 = new(1, ""Value1"");
    public static readonly TestSmartEnum Value2 = new(2, ""Value3"");
    public static readonly TestSmartEnum Value3 = new(2, ""Value3"");
}
";

        var generatedCasts = @"// <auto-generated />
#nullable enable

namespace SomeNamespace;

partial record TestSmartEnum
{
    public static explicit operator TestSmartEnum?(System.Int32 key)
    {
        return TestSmartEnum.TryGet(key, out var @enum) ? @enum : null;
    }

    public static explicit operator System.Int32(TestSmartEnum @enum)
    {
        return @enum.Key;
    }
}
";

        var generatedEquality = @"// <auto-generated />
#nullable enable

namespace SomeNamespace;

partial record TestSmartEnum
{
    public override int GetHashCode() => base.GetHashCode();

    public bool Equals(TestSmartEnum? other) => base.Equals(other);
}
";

        var generatedValues = @"// <auto-generated />
#nullable enable

namespace SomeNamespace;

partial record TestSmartEnum
{
    private static ImmutableList<TestSmartEnum>? _allValues;

    private static ImmutableList<TestSmartEnum> GetAllValues()
    {
        var builder = ImmutableList.CreateBuilder<TestSmartEnum>();
        builder.Add(Value1);
        builder.Add(Value2);
        builder.Add(Value3);
        return builder.ToImmutable();
    }

    public static ImmutableList<TestSmartEnum> AllValues => _allValues ??= GetAllValues();

    public static bool TryGet(System.Int32 key, [NotNullWhen(true)] out TestSmartEnum? @enum)
    {
        @enum = AllValues.SingleOrDefault(v => v.Key == key);
        return @enum is not null;
    }

    public static TestSmartEnum Get(System.Int32 key)
    {
        if (TryGet(key, out var @enum))
        {
            return @enum;
        }

        throw new KeyNotFoundException($""No {nameof(TestSmartEnum)} with key {key} exists"");
    }
}
";

        await Verify.VerifyGeneratorAsync(source,
                                          ("SomeNamespace.TestSmartEnum.CastOperators.g.cs", generatedCasts),
                                          ("SomeNamespace.TestSmartEnum.Equality.g.cs", generatedEquality),
                                          ("SomeNamespace.TestSmartEnum.Values.g.cs", generatedValues));
    }
}

using Verify = Cranks.SeedWork.Domain.Generator.Tests.Verifiers.CSharpSourceGeneratorVerifier<
    Cranks.SeedWork.Domain.Generator.ValueObjectAnalyzers.ValueObjectSourceGenerator>;

namespace Cranks.SeedWork.Domain.Generator.Tests.ValueObjectAnalyzers;

public class ValueObjectGeneratorTest
{
    [Fact]
    public async Task UnaryValueObject_GeneratesCorrectCode()
    {
        var test = @"
using Cranks.SeedWork.Domain.Attributes;

[ValueObject]
public partial record TestValueObject(int Value);
";

        var expected = @"// <auto-generated />
#nullable enable

partial record TestValueObject
    : Cranks.SeedWork.Domain.ValueObject<TestValueObject>, System.IComparable<TestValueObject>, System.IComparable
{

    public static explicit operator TestValueObject(System.Int32 value)
    {
        return new(value);
    }

    public static explicit operator System.Int32(TestValueObject value)
    {
        return value.Value;
    }

    public static bool operator <(TestValueObject? left, TestValueObject? right)
    {
        return System.Collections.Generic.Comparer<TestValueObject>.Default.Compare(left, right) < 0;
    }

    public static bool operator >(TestValueObject? left, TestValueObject? right)
    {
        return System.Collections.Generic.Comparer<TestValueObject>.Default.Compare(left, right) > 0;
    }

    public static bool operator <=(TestValueObject? left, TestValueObject? right)
    {
        return System.Collections.Generic.Comparer<TestValueObject>.Default.Compare(left, right) <= 0;
    }

    public static bool operator >=(TestValueObject? left, TestValueObject? right)
    {
        return System.Collections.Generic.Comparer<TestValueObject>.Default.Compare(left, right) >= 0;
    }

    public int CompareTo(TestValueObject? other)
    {
        if (ReferenceEquals(null, other))
        {
            return 1;
        }

        if (ReferenceEquals(this, other))
        {
            return 0;
        }

        return Value.CompareTo(other.Value);
    }

    public int CompareTo(object? obj)
    {
        if (ReferenceEquals(null, obj))
        {
            return 1;
        }

        if (ReferenceEquals(this, obj))
        {
            return 0;
        }

        return obj is TestValueObject other ? CompareTo(other) : throw new System.ArgumentException($""Object must be of type {nameof(TestValueObject)}"");
    }
}
";

        await Verify.VerifyGeneratorAsync(test, expected, "TestProject.TestValueObject.g.cs");
    }

    [Fact]
    public async Task NonUnaryValueObject_GeneratesCorrectCode()
    {
        var test = @"
using Cranks.SeedWork.Domain.Attributes;

[ValueObject]
public partial record TestValueObject(int Value, string Another);
";

        var expected = @"// <auto-generated />
#nullable enable

partial record TestValueObject
    : Cranks.SeedWork.Domain.ValueObject<TestValueObject>
{
}
";

        await Verify.VerifyGeneratorAsync(test, expected, "TestProject.TestValueObject.g.cs");
    }

    [Fact]
    public async Task NonUnaryValueObject_HasBaseType_GeneratesCorrectCode()
    {
        var test = @"
using Cranks.SeedWork.Domain;
using Cranks.SeedWork.Domain.Attributes;

[ValueObject]
public partial record TestValueObject(int Value, string Another) : ValueObject<TestValueObject>;
";

        var expected = @"// <auto-generated />
#nullable enable

partial record TestValueObject
{
}
";

        await Verify.VerifyGeneratorAsync(test, expected, "TestProject.TestValueObject.g.cs");
    }

    [Fact]
    public async Task WithNamespace_GeneratesCorrectCode()
    {
        var test = @"
using Cranks.SeedWork.Domain.Attributes;

namespace Test;

[ValueObject]
public partial record TestValueObject(int Value, string Another);
";

        var expected = @"// <auto-generated />
#nullable enable

namespace Test;

partial record TestValueObject
    : Cranks.SeedWork.Domain.ValueObject<TestValueObject>
{
}
";

        await Verify.VerifyGeneratorAsync(test, expected, "TestProject.Test.TestValueObject.g.cs");
    }
}
